/*jslint devel:true plusplus:true */

var GenerateForm = {
	variables: {
		currentValue: ''
	},
	
	initialize: function () {
		'use strict';
		
		var newSelect = document.createElement('select'), newOption = Object, newTextNode = Object;
		
		newSelect.setAttribute('name', 'addFormElementType');
		newSelect.setAttribute('id', 'addFormElement');
		newSelect.setAttribute('form', 'economics');
		
		
		newOption = document.createElement('option');
		newOption.setAttribute('value', '');
//		newOption.hidden = true;
		newOption.selected = true;
		newOption.disabled = true;
		newSelect.appendChild(newOption);
		
		
		newOption = document.createElement('option');
		newOption.setAttribute('value', 'Principal');
		newTextNode = document.createTextNode('Principal');
		newOption.appendChild(newTextNode);
		newSelect.appendChild(newOption);
		
		
		newOption = document.createElement('option');
		newOption.setAttribute('value', 'Annuity');
		newTextNode = document.createTextNode('Annuity');
		newOption.appendChild(newTextNode);
		newSelect.appendChild(newOption);
		
		
		newOption = document.createElement('option');
		newOption.setAttribute('value', 'Gradient');
		newTextNode = document.createTextNode('Gradient');
		newOption.appendChild(newTextNode);
		newSelect.appendChild(newOption);
		
		
		document.getElementById('formContainer').appendChild(newSelect);
	},
	
	refresh: function () {
		'use strict';
		
//		this.currentValue = document.forms.namedItem('economics').elements.namedItem('addFormElement').value;
		
		CreateForm.initialize();
	}
};

var CreateForm = {
    variables: {
    },
    
    initialize: function () {
        'use strict';
		
		var newForm = document.createElement('form');
		
		newForm.setAttribute('id', 'economics');
		
		document.getElementById('formContainer').appendChild(newForm);
		
		this.addFormElement('option', 'Principal', 0, document.getElementById('economics'));
    },
    
    addFormElement: function (inputType, elementName, defaultValue, appendTo) {
        'use strict';
		
		var newInput = document.createElement('input'), newTextNode = document.createElement('div').appendChild(document.createTextNode(elementName));
		
		newInput.setAttribute('type', inputType);
		newInput.setAttribute('name', elementName);
		newInput.setAttribute('value', defaultValue);
        newInput.setAttribute('id', elementName);
		newInput.setAttribute('class', 'default');
		
		appendTo.appendChild(newTextNode);
        appendTo.appendChild(newInput);
		appendTo.appendChild(document.createElement('br'));
    },
	
	checkForDefaults: function () {
		'use strict';
	}
};

//var SudokuSolver = {
//    variables: {
//        puzzle: [],
//        options: [1, 2, 3, 4, 5, 6, 7, 8, 9],
//        row: 0,
//        column: 0
//    },
//    
//    init: function (puzzle) {
//        'use strict';
//        
//        this.variables.puzzle = puzzle;
//        
//        this.draw(puzzle);
//        
//        var i;
//        
//        for (i = 0; i < 5; i++) {
//            this.iterate();
//        }
//    },
//    
//    iterate: function () {
//        'use strict';
//         
//        var x, y;
//        
//        for (x = 0; x < 9; x++) {
//            for (y = 0; y < 9; y++) {
//                this.runChecks(x, y);
//            }
//        }
//        console.log(this.variables.puzzle);
//    },
//    
//    resetOptions: function () {
//        'use strict';
//        
//        this.variables.options = [1, 2, 3, 4, 5, 6, 7, 8, 9];
//    },
//    
//    runChecks: function (row, column) {
//        'use strict';
//        
//        this.resetOptions();
//        
////        console.log(this.variables.puzzle[row][column]);
//        if (this.variables.puzzle[row][column] === null) {
//            this.checkRow(row, column);
//        }
//    },
//    
//    checkRow: function (row, column) {
//        'use strict';
//        
////        console.log('Checking Row:');
//        for (this.variables.column = 0; this.variables.column < 9; this.variables.column++) {
////            console.log('(' + row + ',' + this.variables.column + ') :: ' + this.variables.puzzle[row][this.variables.column]);
//            if (this.variables.puzzle[row][this.variables.column] !== null) {
//                this.variables.options[this.variables.puzzle[row][this.variables.column] - 1] = 0;
//            }
//        }
//        
////        console.log(this.variables.options);
//        
//        if (!this.checkForSuccess(row, column)) {
//            this.checkColumn(row, column);
//        }
//    },
//    
//    checkColumn: function (row, column) {
//        'use strict';
//        
////        console.log('Checking Column:');
//        for (this.variables.row = 0; this.variables.row < 9; this.variables.row++) {
////            console.log('(' + this.variables.row + ',' + column + ') :: ' + this.variables.puzzle[this.variables.row][column]);
//            if (this.variables.puzzle[this.variables.row][column] !== null) {
//                this.variables.options[this.variables.puzzle[this.variables.row][column] - 1] = 0;
//            }
//        }
//        
////        console.log(this.variables.options);
//        
//        if (!this.checkForSuccess(row, column)) {
//            this.checkUnit(row, column);
//        }
//    },
//    
//    checkUnit: function (row, column) {
//        'use strict';
//        
//        
//        
////        console.log('Checking Unit:');
//        for (this.variables.row = (Math.floor(row / 3) * 3); this.variables.row < ((Math.floor(row / 3) * 3) + 3); this.variables.row++) {
//            for (this.variables.column = (Math.floor(column / 3) * 3); this.variables.column < ((Math.floor(column / 3) * 3) + 3); this.variables.column++) {
////                console.log('(' + this.variables.row + ',' + this.variables.column + ') :: ' + this.variables.puzzle[this.variables.row][this.variables.column]);
//                if (this.variables.puzzle[this.variables.row][this.variables.column] !== null) {
//                    this.variables.options[this.variables.puzzle[this.variables.row][this.variables.column] - 1] = 0;
//                }
//            }
//        }
//        
////        console.log(this.variables.options);
//        
//        this.checkForSuccess(row, column);
//    },
//    
//    checkForSuccess: function (row, column) {
//        'use strict';
//        
//        if (this.variables.options.filter(Boolean).length === 1) {
//            console.log('Unique match found: ' + this.variables.options.filter(Boolean)[0]);
//            this.changeCell(row, column);
//            return true;
//        } else {
////            console.log('Unique match has not yet been found.');
//            return false;
//        }
//    },
//    
//    changeCell: function (row, column) {
//        'use strict';
//        
//        this.variables.puzzle[row][column] = this.variables.options.filter(Boolean)[0];
////        console.log(this.variables.puzzle);
//    },
//    
//    draw: function (puzzle) {
//        'use strict';
//        
//        var newPuzzle = document.createElement('section'), newCell = document.createElement('div'), newDiv = document.createElement('div'), newTextNode = document.createTextNode('');
//        
//        newPuzzle.setAttribute('id', 'puzzle');
//        
//        for (this.variables.row = 1; this.variables.row <= 9; this.variables.row++) {
//            for (this.variables.column = 1; this.variables.column <= 9; this.variables.column++) {
//                newCell = document.createElement('div');
//                newDiv = document.createElement('div');
//                
//                if (puzzle[this.variables.row - 1][this.variables.column - 1] !== null) {
//                    newTextNode = document.createTextNode(puzzle[this.variables.row - 1][this.variables.column - 1]);
//                } else {
//                    newTextNode = document.createTextNode('');
//                }
//                
//                newCell.setAttribute('id', '(' + this.variables.row + ',' + this.variables.column + ')');
//                newCell.setAttribute('class', 'puzzle cell row' + this.variables.row + ' col' + this.variables.column);
//                
//                newDiv.appendChild(newTextNode);
//                newCell.appendChild(newDiv);
//                newPuzzle.appendChild(newCell);
//            }
//        }
//        
//        document.getElementById('container').appendChild(newPuzzle);
//    }
//};

window.onload = function () {
    'use strict';

	GenerateForm.initialize();
	
	document.getElementById('addFormElement').onchange = function () {
		GenerateForm.refresh();
	};
};

////Multiple methods for solutions:
////  Number of Options   -->   Unique
////                      -->   Multiple